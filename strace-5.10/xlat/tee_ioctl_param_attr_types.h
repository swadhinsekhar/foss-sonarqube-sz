/* Generated by ./xlat/gen.sh from ./xlat/tee_ioctl_param_attr_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(TEE_IOCTL_PARAM_ATTR_TYPE_NONE) || (defined(HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_NONE) && HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_NONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOCTL_PARAM_ATTR_TYPE_NONE) == (0), "TEE_IOCTL_PARAM_ATTR_TYPE_NONE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOCTL_PARAM_ATTR_TYPE_NONE 0
#endif
#if defined(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT) || (defined(HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT) && HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT) == (1), "TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT 1
#endif
#if defined(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT) || (defined(HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT) && HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT) == (2), "TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT 2
#endif
#if defined(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT) || (defined(HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT) && HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT) == (3), "TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT 3
#endif
#if defined(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT) || (defined(HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT) && HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT) == (5), "TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT 5
#endif
#if defined(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT) || (defined(HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT) && HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT) == (6), "TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT 6
#endif
#if defined(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT) || (defined(HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT) && HAVE_DECL_TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT) == (7), "TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT 7
#endif
#if defined(TEE_IOCTL_PARAM_ATTR_META) || (defined(HAVE_DECL_TEE_IOCTL_PARAM_ATTR_META) && HAVE_DECL_TEE_IOCTL_PARAM_ATTR_META)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOCTL_PARAM_ATTR_META) == (0x100), "TEE_IOCTL_PARAM_ATTR_META != 0x100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOCTL_PARAM_ATTR_META 0x100
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat tee_ioctl_param_attr_types in mpers mode

# else

static const struct xlat_data tee_ioctl_param_attr_types_xdata[] = {
 XLAT(TEE_IOCTL_PARAM_ATTR_TYPE_NONE),
 #define XLAT_VAL_0 ((unsigned) (TEE_IOCTL_PARAM_ATTR_TYPE_NONE))
 #define XLAT_STR_0 STRINGIFY(TEE_IOCTL_PARAM_ATTR_TYPE_NONE)
 XLAT(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT),
 #define XLAT_VAL_1 ((unsigned) (TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT))
 #define XLAT_STR_1 STRINGIFY(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INPUT)
 XLAT(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT),
 #define XLAT_VAL_2 ((unsigned) (TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT))
 #define XLAT_STR_2 STRINGIFY(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_OUTPUT)
 XLAT(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT),
 #define XLAT_VAL_3 ((unsigned) (TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT))
 #define XLAT_STR_3 STRINGIFY(TEE_IOCTL_PARAM_ATTR_TYPE_VALUE_INOUT)
 XLAT(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT),
 #define XLAT_VAL_4 ((unsigned) (TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT))
 #define XLAT_STR_4 STRINGIFY(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INPUT)
 XLAT(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT),
 #define XLAT_VAL_5 ((unsigned) (TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT))
 #define XLAT_STR_5 STRINGIFY(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_OUTPUT)
 XLAT(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT),
 #define XLAT_VAL_6 ((unsigned) (TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT))
 #define XLAT_STR_6 STRINGIFY(TEE_IOCTL_PARAM_ATTR_TYPE_MEMREF_INOUT)
 XLAT(TEE_IOCTL_PARAM_ATTR_META),
 #define XLAT_VAL_7 ((unsigned) (TEE_IOCTL_PARAM_ATTR_META))
 #define XLAT_STR_7 STRINGIFY(TEE_IOCTL_PARAM_ATTR_META)
};
static
const struct xlat tee_ioctl_param_attr_types[1] = { {
 .data = tee_ioctl_param_attr_types_xdata,
 .size = ARRAY_SIZE(tee_ioctl_param_attr_types_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
