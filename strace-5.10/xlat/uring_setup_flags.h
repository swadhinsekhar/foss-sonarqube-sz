/* Generated by ./xlat/gen.sh from ./xlat/uring_setup_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(IORING_SETUP_IOPOLL) || (defined(HAVE_DECL_IORING_SETUP_IOPOLL) && HAVE_DECL_IORING_SETUP_IOPOLL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_SETUP_IOPOLL) == (1U), "IORING_SETUP_IOPOLL != 1U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_SETUP_IOPOLL 1U
#endif
#if defined(IORING_SETUP_SQPOLL) || (defined(HAVE_DECL_IORING_SETUP_SQPOLL) && HAVE_DECL_IORING_SETUP_SQPOLL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_SETUP_SQPOLL) == ((1U << 1)), "IORING_SETUP_SQPOLL != (1U << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_SETUP_SQPOLL (1U << 1)
#endif
#if defined(IORING_SETUP_SQ_AFF) || (defined(HAVE_DECL_IORING_SETUP_SQ_AFF) && HAVE_DECL_IORING_SETUP_SQ_AFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_SETUP_SQ_AFF) == ((1U << 2)), "IORING_SETUP_SQ_AFF != (1U << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_SETUP_SQ_AFF (1U << 2)
#endif
#if defined(IORING_SETUP_CQSIZE) || (defined(HAVE_DECL_IORING_SETUP_CQSIZE) && HAVE_DECL_IORING_SETUP_CQSIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_SETUP_CQSIZE) == ((1U << 3)), "IORING_SETUP_CQSIZE != (1U << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_SETUP_CQSIZE (1U << 3)
#endif
#if defined(IORING_SETUP_CLAMP) || (defined(HAVE_DECL_IORING_SETUP_CLAMP) && HAVE_DECL_IORING_SETUP_CLAMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_SETUP_CLAMP) == ((1U << 4)), "IORING_SETUP_CLAMP != (1U << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_SETUP_CLAMP (1U << 4)
#endif
#if defined(IORING_SETUP_ATTACH_WQ) || (defined(HAVE_DECL_IORING_SETUP_ATTACH_WQ) && HAVE_DECL_IORING_SETUP_ATTACH_WQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_SETUP_ATTACH_WQ) == ((1U << 5)), "IORING_SETUP_ATTACH_WQ != (1U << 5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_SETUP_ATTACH_WQ (1U << 5)
#endif
#if defined(IORING_SETUP_R_DISABLED) || (defined(HAVE_DECL_IORING_SETUP_R_DISABLED) && HAVE_DECL_IORING_SETUP_R_DISABLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IORING_SETUP_R_DISABLED) == ((1U << 6)), "IORING_SETUP_R_DISABLED != (1U << 6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IORING_SETUP_R_DISABLED (1U << 6)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat uring_setup_flags in mpers mode

# else

static const struct xlat_data uring_setup_flags_xdata[] = {
 XLAT(IORING_SETUP_IOPOLL),
 #define XLAT_VAL_0 ((unsigned) (IORING_SETUP_IOPOLL))
 #define XLAT_STR_0 STRINGIFY(IORING_SETUP_IOPOLL)
 XLAT(IORING_SETUP_SQPOLL),
 #define XLAT_VAL_1 ((unsigned) (IORING_SETUP_SQPOLL))
 #define XLAT_STR_1 STRINGIFY(IORING_SETUP_SQPOLL)
 XLAT(IORING_SETUP_SQ_AFF),
 #define XLAT_VAL_2 ((unsigned) (IORING_SETUP_SQ_AFF))
 #define XLAT_STR_2 STRINGIFY(IORING_SETUP_SQ_AFF)
 XLAT(IORING_SETUP_CQSIZE),
 #define XLAT_VAL_3 ((unsigned) (IORING_SETUP_CQSIZE))
 #define XLAT_STR_3 STRINGIFY(IORING_SETUP_CQSIZE)
 XLAT(IORING_SETUP_CLAMP),
 #define XLAT_VAL_4 ((unsigned) (IORING_SETUP_CLAMP))
 #define XLAT_STR_4 STRINGIFY(IORING_SETUP_CLAMP)
 XLAT(IORING_SETUP_ATTACH_WQ),
 #define XLAT_VAL_5 ((unsigned) (IORING_SETUP_ATTACH_WQ))
 #define XLAT_STR_5 STRINGIFY(IORING_SETUP_ATTACH_WQ)
 XLAT(IORING_SETUP_R_DISABLED),
 #define XLAT_VAL_6 ((unsigned) (IORING_SETUP_R_DISABLED))
 #define XLAT_STR_6 STRINGIFY(IORING_SETUP_R_DISABLED)
};
static
const struct xlat uring_setup_flags[1] = { {
 .data = uring_setup_flags_xdata,
 .size = ARRAY_SIZE(uring_setup_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
