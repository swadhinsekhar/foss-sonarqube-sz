/* Generated by ./xlat/gen.sh from ./xlat/tee_ioctl_max_arg_size.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(TEE_MAX_ARG_SIZE) || (defined(HAVE_DECL_TEE_MAX_ARG_SIZE) && HAVE_DECL_TEE_MAX_ARG_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_MAX_ARG_SIZE) == (1024), "TEE_MAX_ARG_SIZE != 1024");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_MAX_ARG_SIZE 1024
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat tee_ioctl_max_arg_size in mpers mode

# else

static const struct xlat_data tee_ioctl_max_arg_size_xdata[] = {
 XLAT(TEE_MAX_ARG_SIZE),
 #define XLAT_VAL_0 ((unsigned) (TEE_MAX_ARG_SIZE))
 #define XLAT_STR_0 STRINGIFY(TEE_MAX_ARG_SIZE)
};
static
const struct xlat tee_ioctl_max_arg_size[1] = { {
 .data = tee_ioctl_max_arg_size_xdata,
 .size = ARRAY_SIZE(tee_ioctl_max_arg_size_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
