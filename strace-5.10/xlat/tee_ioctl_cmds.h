/* Generated by ./xlat/gen.sh from ./xlat/tee_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(TEE_IOC_VERSION) || (defined(HAVE_DECL_TEE_IOC_VERSION) && HAVE_DECL_TEE_IOC_VERSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_VERSION) == (_IOR (0xa4, 0, struct_tee_ioctl_version_data)), "TEE_IOC_VERSION != _IOR (0xa4, 0, struct_tee_ioctl_version_data)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_VERSION _IOR (0xa4, 0, struct_tee_ioctl_version_data)
#endif
#if defined(TEE_IOC_SHM_ALLOC) || (defined(HAVE_DECL_TEE_IOC_SHM_ALLOC) && HAVE_DECL_TEE_IOC_SHM_ALLOC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_SHM_ALLOC) == (_IOWR(0xa4, 1, struct_tee_ioctl_shm_alloc_data)), "TEE_IOC_SHM_ALLOC != _IOWR(0xa4, 1, struct_tee_ioctl_shm_alloc_data)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_SHM_ALLOC _IOWR(0xa4, 1, struct_tee_ioctl_shm_alloc_data)
#endif
#if defined(TEE_IOC_OPEN_SESSION) || (defined(HAVE_DECL_TEE_IOC_OPEN_SESSION) && HAVE_DECL_TEE_IOC_OPEN_SESSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_OPEN_SESSION) == (_IOR (0xa4, 2, struct_tee_ioctl_buf_data)), "TEE_IOC_OPEN_SESSION != _IOR (0xa4, 2, struct_tee_ioctl_buf_data)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_OPEN_SESSION _IOR (0xa4, 2, struct_tee_ioctl_buf_data)
#endif
#if defined(TEE_IOC_INVOKE) || (defined(HAVE_DECL_TEE_IOC_INVOKE) && HAVE_DECL_TEE_IOC_INVOKE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_INVOKE) == (_IOR (0xa4, 3, struct_tee_ioctl_buf_data)), "TEE_IOC_INVOKE != _IOR (0xa4, 3, struct_tee_ioctl_buf_data)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_INVOKE _IOR (0xa4, 3, struct_tee_ioctl_buf_data)
#endif
#if defined(TEE_IOC_CANCEL) || (defined(HAVE_DECL_TEE_IOC_CANCEL) && HAVE_DECL_TEE_IOC_CANCEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_CANCEL) == (_IOR (0xa4, 4, struct_tee_ioctl_cancel_arg)), "TEE_IOC_CANCEL != _IOR (0xa4, 4, struct_tee_ioctl_cancel_arg)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_CANCEL _IOR (0xa4, 4, struct_tee_ioctl_cancel_arg)
#endif
#if defined(TEE_IOC_CLOSE_SESSION) || (defined(HAVE_DECL_TEE_IOC_CLOSE_SESSION) && HAVE_DECL_TEE_IOC_CLOSE_SESSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_CLOSE_SESSION) == (_IOR (0xa4, 5, struct_tee_ioctl_close_session_arg)), "TEE_IOC_CLOSE_SESSION != _IOR (0xa4, 5, struct_tee_ioctl_close_session_arg)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_CLOSE_SESSION _IOR (0xa4, 5, struct_tee_ioctl_close_session_arg)
#endif
#if defined(TEE_IOC_SUPPL_RECV) || (defined(HAVE_DECL_TEE_IOC_SUPPL_RECV) && HAVE_DECL_TEE_IOC_SUPPL_RECV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_SUPPL_RECV) == (_IOR (0xa4, 6, struct_tee_ioctl_buf_data)), "TEE_IOC_SUPPL_RECV != _IOR (0xa4, 6, struct_tee_ioctl_buf_data)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_SUPPL_RECV _IOR (0xa4, 6, struct_tee_ioctl_buf_data)
#endif
#if defined(TEE_IOC_SUPPL_SEND) || (defined(HAVE_DECL_TEE_IOC_SUPPL_SEND) && HAVE_DECL_TEE_IOC_SUPPL_SEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_SUPPL_SEND) == (_IOR (0xa4, 7, struct_tee_ioctl_buf_data)), "TEE_IOC_SUPPL_SEND != _IOR (0xa4, 7, struct_tee_ioctl_buf_data)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_SUPPL_SEND _IOR (0xa4, 7, struct_tee_ioctl_buf_data)
#endif
#if defined(TEE_IOC_SHM_REGISTER_FD) || (defined(HAVE_DECL_TEE_IOC_SHM_REGISTER_FD) && HAVE_DECL_TEE_IOC_SHM_REGISTER_FD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_SHM_REGISTER_FD) == (_IOWR(0xa4, 8, struct_tee_ioctl_shm_register_fd_data)), "TEE_IOC_SHM_REGISTER_FD != _IOWR(0xa4, 8, struct_tee_ioctl_shm_register_fd_data)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_SHM_REGISTER_FD _IOWR(0xa4, 8, struct_tee_ioctl_shm_register_fd_data)
#endif
#if defined(TEE_IOC_SHM_REGISTER) || (defined(HAVE_DECL_TEE_IOC_SHM_REGISTER) && HAVE_DECL_TEE_IOC_SHM_REGISTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TEE_IOC_SHM_REGISTER) == (_IOWR(0xa4, 9, struct_tee_ioctl_shm_register_data)), "TEE_IOC_SHM_REGISTER != _IOWR(0xa4, 9, struct_tee_ioctl_shm_register_data)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TEE_IOC_SHM_REGISTER _IOWR(0xa4, 9, struct_tee_ioctl_shm_register_data)
#endif

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat tee_ioctl_cmds in mpers mode

# else

static const struct xlat_data tee_ioctl_cmds_xdata[] = {
 XLAT(TEE_IOC_VERSION),
 #define XLAT_VAL_0 ((unsigned) (TEE_IOC_VERSION))
 #define XLAT_STR_0 STRINGIFY(TEE_IOC_VERSION)
 XLAT(TEE_IOC_SHM_ALLOC),
 #define XLAT_VAL_1 ((unsigned) (TEE_IOC_SHM_ALLOC))
 #define XLAT_STR_1 STRINGIFY(TEE_IOC_SHM_ALLOC)
 XLAT(TEE_IOC_OPEN_SESSION),
 #define XLAT_VAL_2 ((unsigned) (TEE_IOC_OPEN_SESSION))
 #define XLAT_STR_2 STRINGIFY(TEE_IOC_OPEN_SESSION)
 XLAT(TEE_IOC_INVOKE),
 #define XLAT_VAL_3 ((unsigned) (TEE_IOC_INVOKE))
 #define XLAT_STR_3 STRINGIFY(TEE_IOC_INVOKE)
 XLAT(TEE_IOC_CANCEL),
 #define XLAT_VAL_4 ((unsigned) (TEE_IOC_CANCEL))
 #define XLAT_STR_4 STRINGIFY(TEE_IOC_CANCEL)
 XLAT(TEE_IOC_CLOSE_SESSION),
 #define XLAT_VAL_5 ((unsigned) (TEE_IOC_CLOSE_SESSION))
 #define XLAT_STR_5 STRINGIFY(TEE_IOC_CLOSE_SESSION)
 XLAT(TEE_IOC_SUPPL_RECV),
 #define XLAT_VAL_6 ((unsigned) (TEE_IOC_SUPPL_RECV))
 #define XLAT_STR_6 STRINGIFY(TEE_IOC_SUPPL_RECV)
 XLAT(TEE_IOC_SUPPL_SEND),
 #define XLAT_VAL_7 ((unsigned) (TEE_IOC_SUPPL_SEND))
 #define XLAT_STR_7 STRINGIFY(TEE_IOC_SUPPL_SEND)
 XLAT(TEE_IOC_SHM_REGISTER_FD),
 #define XLAT_VAL_8 ((unsigned) (TEE_IOC_SHM_REGISTER_FD))
 #define XLAT_STR_8 STRINGIFY(TEE_IOC_SHM_REGISTER_FD)
 XLAT(TEE_IOC_SHM_REGISTER),
 #define XLAT_VAL_9 ((unsigned) (TEE_IOC_SHM_REGISTER))
 #define XLAT_STR_9 STRINGIFY(TEE_IOC_SHM_REGISTER)
};
static
const struct xlat tee_ioctl_cmds[1] = { {
 .data = tee_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(tee_ioctl_cmds_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
